c
response
c
 get :show, params: {username:user.username }
user=User.create(username:"vikas",email:"vikas@gmail.com",password:"1345")
c
jwt_encode(user_id: @user.id)
c
&.authenticate
@user&.authenticate(params[:password])
 @user=User.find_by_email(params[:email])
c
v
c
HashWithIndifferentAccess.new decoded
decoded = JWT.decode(token,SECRET_KEY)[0]
decoded
JWT.decode(token,SECRET_KEY)[0]
c
jwt_decode(header)
 header = header.split(" ").last if header
 header = request.headers["Authorization"]
c
payload
c
SECRET_KEY=Rails.application.secret_key_base
extend ActiveSupport::Concern
c
render json: @user, status: :ok
c
 HashWithIndifferentAccess.new decoded
decoded
 decoded = JWT.decode(token,SECRET_KEY)[0]
decoded
JWT.decode(token,SECRET_KEY)[0]
token
c
header.split(" ").last
c
header = request.headers["Authorization"]
c
SECRET_KEY=Rails.application.secret_key_base
c
 HashWithIndifferentAccess.new decoded
JWT.decode(token,SECRET_KEY)[0]
token
 header.split(" ").last
c
header.split(" ").last if header
 request.headers["Authorization"]
c
SECRET_KEY=Rails.application.secret_key_base
c
payload
JWT.encode(payload, SECRET_KEY)
 payload[:exp] = exp.to_i
exp = 7.days.from_now
payload
 def jwt_encode(payload, exp = 7.days.from_now)
SECRET_KEY=Rails.application.secret_key_base
c
 @user=User.find_by_email(params[:email])
c
 @user=User.new(ar_prm)
c
 @user=User.new(ar_prm)
c
if @user&.authenticate(params[:password])
 @user=User.find_by_email(params[:email])
c
SECRET_KEY=Rails.application.secret_key_base
c
  @current_user = User.find(@decoded[:user_id])
 @decoded = jwt_decode(header)
jwt_decode(header)
header
   header = header.split(" ").last if header
 header.split(" ").last if header
header
c
@user=User.new(ar_prm)
c
 @user=User.new(ar_prm)
c
 @user=User.new(ar_prm)
c
mail"=>"vikasyadav@gmail.com", "password"=>"[FILTERED]", "controller"=>"users", "action"=>"create"} }
 @user=User.new(ar_prm)
ar_prm @user=User.new(ar_prm)
ar_prm
